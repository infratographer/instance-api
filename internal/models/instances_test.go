// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testInstancesUpsert(t *testing.T) {
	t.Parallel()

	if len(instanceAllColumns) == len(instancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Instance{}
	if err = randomize.Struct(seed, &o, instanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Instance: %s", err)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, instanceDBTypes, false, instancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Instance: %s", err)
	}

	count, err = Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInstances(t *testing.T) {
	t.Parallel()

	query := Instances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInstancesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstancesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Instances().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstancesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstanceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Instances().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstanceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InstanceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Instance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstanceExists to return true, but got false.")
	}
}

func testInstancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	instanceFound, err := FindInstance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if instanceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInstancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Instances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInstancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Instances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instanceOne := &Instance{}
	instanceTwo := &Instance{}
	if err = randomize.Struct(seed, instanceOne, instanceDBTypes, false, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}
	if err = randomize.Struct(seed, instanceTwo, instanceDBTypes, false, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = instanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = instanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Instances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	instanceOne := &Instance{}
	instanceTwo := &Instance{}
	if err = randomize.Struct(seed, instanceOne, instanceDBTypes, false, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}
	if err = randomize.Struct(seed, instanceTwo, instanceDBTypes, false, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = instanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = instanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func instanceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func instanceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Instance) error {
	*o = Instance{}
	return nil
}

func testInstancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Instance{}
	o := &Instance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, instanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Instance object: %s", err)
	}

	AddInstanceHook(boil.BeforeInsertHook, instanceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	instanceBeforeInsertHooks = []InstanceHook{}

	AddInstanceHook(boil.AfterInsertHook, instanceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	instanceAfterInsertHooks = []InstanceHook{}

	AddInstanceHook(boil.AfterSelectHook, instanceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	instanceAfterSelectHooks = []InstanceHook{}

	AddInstanceHook(boil.BeforeUpdateHook, instanceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	instanceBeforeUpdateHooks = []InstanceHook{}

	AddInstanceHook(boil.AfterUpdateHook, instanceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	instanceAfterUpdateHooks = []InstanceHook{}

	AddInstanceHook(boil.BeforeDeleteHook, instanceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	instanceBeforeDeleteHooks = []InstanceHook{}

	AddInstanceHook(boil.AfterDeleteHook, instanceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	instanceAfterDeleteHooks = []InstanceHook{}

	AddInstanceHook(boil.BeforeUpsertHook, instanceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	instanceBeforeUpsertHooks = []InstanceHook{}

	AddInstanceHook(boil.AfterUpsertHook, instanceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	instanceAfterUpsertHooks = []InstanceHook{}
}

func testInstancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(instanceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstanceToOneInstanceProviderUsingInstanceProvider(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Instance
	var foreign InstanceProvider

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, instanceDBTypes, false, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, instanceProviderDBTypes, false, instanceProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceProvider struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InstanceProviderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InstanceProvider().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddInstanceProviderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *InstanceProvider) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InstanceSlice{&local}
	if err = local.L.LoadInstanceProvider(ctx, tx, false, (*[]*Instance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InstanceProvider == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InstanceProvider = nil
	if err = local.L.LoadInstanceProvider(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InstanceProvider == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInstanceToOneSetOpInstanceProviderUsingInstanceProvider(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Instance
	var b, c InstanceProvider

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instanceDBTypes, false, strmangle.SetComplement(instancePrimaryKeyColumns, instanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, instanceProviderDBTypes, false, strmangle.SetComplement(instanceProviderPrimaryKeyColumns, instanceProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, instanceProviderDBTypes, false, strmangle.SetComplement(instanceProviderPrimaryKeyColumns, instanceProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*InstanceProvider{&b, &c} {
		err = a.SetInstanceProvider(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InstanceProvider != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Instances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InstanceProviderID != x.ID {
			t.Error("foreign key was wrong value", a.InstanceProviderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InstanceProviderID))
		reflect.Indirect(reflect.ValueOf(&a.InstanceProviderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InstanceProviderID != x.ID {
			t.Error("foreign key was wrong value", a.InstanceProviderID, x.ID)
		}
	}
}

func testInstancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstanceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Instances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	instanceDBTypes = map[string]string{`ID`: `uuid`, `Name`: `string`, `TenantID`: `uuid`, `LocationID`: `uuid`, `InstanceProviderID`: `uuid`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `DeletedAt`: `timestamptz`}
	_               = bytes.MinRead
)

func testInstancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(instancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(instanceAllColumns) == len(instancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, instanceDBTypes, true, instancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInstancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(instanceAllColumns) == len(instancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Instance{}
	if err = randomize.Struct(seed, o, instanceDBTypes, true, instanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Instances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, instanceDBTypes, true, instancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Instance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(instanceAllColumns, instancePrimaryKeyColumns) {
		fields = instanceAllColumns
	} else {
		fields = strmangle.SetComplement(
			instanceAllColumns,
			instancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InstanceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
