// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Instance is an object representing the database table.
type Instance struct {
	ID                 string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name               string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	TenantID           string    `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	LocationID         string    `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	InstanceProviderID string    `boil:"instance_provider_id" json:"instance_provider_id" toml:"instance_provider_id" yaml:"instance_provider_id"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *instanceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L instanceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstanceColumns = struct {
	ID                 string
	Name               string
	TenantID           string
	LocationID         string
	InstanceProviderID string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	Name:               "name",
	TenantID:           "tenant_id",
	LocationID:         "location_id",
	InstanceProviderID: "instance_provider_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var InstanceTableColumns = struct {
	ID                 string
	Name               string
	TenantID           string
	LocationID         string
	InstanceProviderID string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "instances.id",
	Name:               "instances.name",
	TenantID:           "instances.tenant_id",
	LocationID:         "instances.location_id",
	InstanceProviderID: "instances.instance_provider_id",
	CreatedAt:          "instances.created_at",
	UpdatedAt:          "instances.updated_at",
	DeletedAt:          "instances.deleted_at",
}

// Generated where

var InstanceWhere = struct {
	ID                 whereHelperstring
	Name               whereHelperstring
	TenantID           whereHelperstring
	LocationID         whereHelperstring
	InstanceProviderID whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"instances\".\"id\""},
	Name:               whereHelperstring{field: "\"instances\".\"name\""},
	TenantID:           whereHelperstring{field: "\"instances\".\"tenant_id\""},
	LocationID:         whereHelperstring{field: "\"instances\".\"location_id\""},
	InstanceProviderID: whereHelperstring{field: "\"instances\".\"instance_provider_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"instances\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"instances\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"instances\".\"deleted_at\""},
}

// InstanceRels is where relationship names are stored.
var InstanceRels = struct {
	InstanceProvider string
}{
	InstanceProvider: "InstanceProvider",
}

// instanceR is where relationships are stored.
type instanceR struct {
	InstanceProvider *InstanceProvider `boil:"InstanceProvider" json:"InstanceProvider" toml:"InstanceProvider" yaml:"InstanceProvider"`
}

// NewStruct creates a new relationship struct
func (*instanceR) NewStruct() *instanceR {
	return &instanceR{}
}

func (r *instanceR) GetInstanceProvider() *InstanceProvider {
	if r == nil {
		return nil
	}
	return r.InstanceProvider
}

// instanceL is where Load methods for each relationship are stored.
type instanceL struct{}

var (
	instanceAllColumns            = []string{"id", "name", "tenant_id", "location_id", "instance_provider_id", "created_at", "updated_at", "deleted_at"}
	instanceColumnsWithoutDefault = []string{"name", "tenant_id", "location_id", "instance_provider_id"}
	instanceColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	instancePrimaryKeyColumns     = []string{"id"}
	instanceGeneratedColumns      = []string{}
)

type (
	// InstanceSlice is an alias for a slice of pointers to Instance.
	// This should almost always be used instead of []Instance.
	InstanceSlice []*Instance
	// InstanceHook is the signature for custom Instance hook methods
	InstanceHook func(context.Context, boil.ContextExecutor, *Instance) error

	instanceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	instanceType                 = reflect.TypeOf(&Instance{})
	instanceMapping              = queries.MakeStructMapping(instanceType)
	instancePrimaryKeyMapping, _ = queries.BindMapping(instanceType, instanceMapping, instancePrimaryKeyColumns)
	instanceInsertCacheMut       sync.RWMutex
	instanceInsertCache          = make(map[string]insertCache)
	instanceUpdateCacheMut       sync.RWMutex
	instanceUpdateCache          = make(map[string]updateCache)
	instanceUpsertCacheMut       sync.RWMutex
	instanceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var instanceAfterSelectHooks []InstanceHook

var instanceBeforeInsertHooks []InstanceHook
var instanceAfterInsertHooks []InstanceHook

var instanceBeforeUpdateHooks []InstanceHook
var instanceAfterUpdateHooks []InstanceHook

var instanceBeforeDeleteHooks []InstanceHook
var instanceAfterDeleteHooks []InstanceHook

var instanceBeforeUpsertHooks []InstanceHook
var instanceAfterUpsertHooks []InstanceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Instance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Instance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Instance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Instance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Instance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Instance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Instance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Instance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Instance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstanceHook registers your hook function for all future operations.
func AddInstanceHook(hookPoint boil.HookPoint, instanceHook InstanceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		instanceAfterSelectHooks = append(instanceAfterSelectHooks, instanceHook)
	case boil.BeforeInsertHook:
		instanceBeforeInsertHooks = append(instanceBeforeInsertHooks, instanceHook)
	case boil.AfterInsertHook:
		instanceAfterInsertHooks = append(instanceAfterInsertHooks, instanceHook)
	case boil.BeforeUpdateHook:
		instanceBeforeUpdateHooks = append(instanceBeforeUpdateHooks, instanceHook)
	case boil.AfterUpdateHook:
		instanceAfterUpdateHooks = append(instanceAfterUpdateHooks, instanceHook)
	case boil.BeforeDeleteHook:
		instanceBeforeDeleteHooks = append(instanceBeforeDeleteHooks, instanceHook)
	case boil.AfterDeleteHook:
		instanceAfterDeleteHooks = append(instanceAfterDeleteHooks, instanceHook)
	case boil.BeforeUpsertHook:
		instanceBeforeUpsertHooks = append(instanceBeforeUpsertHooks, instanceHook)
	case boil.AfterUpsertHook:
		instanceAfterUpsertHooks = append(instanceAfterUpsertHooks, instanceHook)
	}
}

// One returns a single instance record from the query.
func (q instanceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Instance, error) {
	o := &Instance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for instances")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Instance records from the query.
func (q instanceQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstanceSlice, error) {
	var o []*Instance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Instance slice")
	}

	if len(instanceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Instance records in the query.
func (q instanceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count instances rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q instanceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if instances exists")
	}

	return count > 0, nil
}

// InstanceProvider pointed to by the foreign key.
func (o *Instance) InstanceProvider(mods ...qm.QueryMod) instanceProviderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InstanceProviderID),
	}

	queryMods = append(queryMods, mods...)

	return InstanceProviders(queryMods...)
}

// LoadInstanceProvider allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (instanceL) LoadInstanceProvider(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInstance interface{}, mods queries.Applicator) error {
	var slice []*Instance
	var object *Instance

	if singular {
		var ok bool
		object, ok = maybeInstance.(*Instance)
		if !ok {
			object = new(Instance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInstance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInstance))
			}
		}
	} else {
		s, ok := maybeInstance.(*[]*Instance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInstance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInstance))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &instanceR{}
		}
		args = append(args, object.InstanceProviderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &instanceR{}
			}

			for _, a := range args {
				if a == obj.InstanceProviderID {
					continue Outer
				}
			}

			args = append(args, obj.InstanceProviderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`instance_providers`),
		qm.WhereIn(`instance_providers.id in ?`, args...),
		qmhelper.WhereIsNull(`instance_providers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InstanceProvider")
	}

	var resultSlice []*InstanceProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InstanceProvider")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for instance_providers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for instance_providers")
	}

	if len(instanceProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InstanceProvider = foreign
		if foreign.R == nil {
			foreign.R = &instanceProviderR{}
		}
		foreign.R.Instances = append(foreign.R.Instances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InstanceProviderID == foreign.ID {
				local.R.InstanceProvider = foreign
				if foreign.R == nil {
					foreign.R = &instanceProviderR{}
				}
				foreign.R.Instances = append(foreign.R.Instances, local)
				break
			}
		}
	}

	return nil
}

// SetInstanceProvider of the instance to the related item.
// Sets o.R.InstanceProvider to related.
// Adds o to related.R.Instances.
func (o *Instance) SetInstanceProvider(ctx context.Context, exec boil.ContextExecutor, insert bool, related *InstanceProvider) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"instance_provider_id"}),
		strmangle.WhereClause("\"", "\"", 2, instancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InstanceProviderID = related.ID
	if o.R == nil {
		o.R = &instanceR{
			InstanceProvider: related,
		}
	} else {
		o.R.InstanceProvider = related
	}

	if related.R == nil {
		related.R = &instanceProviderR{
			Instances: InstanceSlice{o},
		}
	} else {
		related.R.Instances = append(related.R.Instances, o)
	}

	return nil
}

// Instances retrieves all the records using an executor.
func Instances(mods ...qm.QueryMod) instanceQuery {
	mods = append(mods, qm.From("\"instances\""), qmhelper.WhereIsNull("\"instances\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"instances\".*"})
	}

	return instanceQuery{q}
}

// FindInstance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstance(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Instance, error) {
	instanceObj := &Instance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instances\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, instanceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from instances")
	}

	if err = instanceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return instanceObj, err
	}

	return instanceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Instance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no instances provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instanceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	instanceInsertCacheMut.RLock()
	cache, cached := instanceInsertCache[key]
	instanceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			instanceAllColumns,
			instanceColumnsWithDefault,
			instanceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(instanceType, instanceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(instanceType, instanceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instances\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instances\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into instances")
	}

	if !cached {
		instanceInsertCacheMut.Lock()
		instanceInsertCache[key] = cache
		instanceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Instance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Instance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	instanceUpdateCacheMut.RLock()
	cache, cached := instanceUpdateCache[key]
	instanceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			instanceAllColumns,
			instancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update instances, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instances\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, instancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(instanceType, instanceMapping, append(wl, instancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update instances row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for instances")
	}

	if !cached {
		instanceUpdateCacheMut.Lock()
		instanceUpdateCache[key] = cache
		instanceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q instanceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for instances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for instances")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstanceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, instancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in instance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all instance")
	}
	return rowsAff, nil
}

// Delete deletes a single Instance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Instance) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Instance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), instancePrimaryKeyMapping)
		sql = "DELETE FROM \"instances\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"instances\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(instanceType, instanceMapping, append(wl, instancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from instances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for instances")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q instanceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no instanceQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from instances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for instances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstanceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(instanceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instancePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"instances\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instancePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instancePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"instances\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, instancePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from instance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for instances")
	}

	if len(instanceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Instance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstanceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstanceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instances\".* FROM \"instances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instancePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstanceSlice")
	}

	*o = slice

	return nil
}

// InstanceExists checks if the Instance row exists.
func InstanceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instances\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if instances exists")
	}

	return exists, nil
}

// Exists checks if the Instance row exists.
func (o *Instance) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InstanceExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Instance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no instances provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instanceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	instanceUpsertCacheMut.RLock()
	cache, cached := instanceUpsertCache[key]
	instanceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			instanceAllColumns,
			instanceColumnsWithDefault,
			instanceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			instanceAllColumns,
			instancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert instances, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(instancePrimaryKeyColumns))
			copy(conflict, instancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"instances\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(instanceType, instanceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(instanceType, instanceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert instances")
	}

	if !cached {
		instanceUpsertCacheMut.Lock()
		instanceUpsertCache[key] = cache
		instanceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
