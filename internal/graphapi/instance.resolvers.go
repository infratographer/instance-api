package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"encoding/json"
	"fmt"

	"go.infratographer.com/instance-api/internal/ent/generated"
	"go.infratographer.com/instance-api/internal/ent/generated/instancemetadata"
	graphapigen "go.infratographer.com/instance-api/internal/graphapi/generated"
	"go.infratographer.com/x/gidx"
)

// CreateInstance is the resolver for the createInstance field.
func (r *mutationResolver) CreateInstance(ctx context.Context, input generated.CreateInstanceInput) (*generated.Instance, error) {
	panic(fmt.Errorf("not implemented: CreateInstance - createInstance"))
}

// UpdateInstance is the resolver for the updateInstance field.
func (r *mutationResolver) UpdateInstance(ctx context.Context, input generated.UpdateInstanceInput) (*generated.Instance, error) {
	panic(fmt.Errorf("not implemented: UpdateInstance - updateInstance"))
}

// SetInstanceAnnotation is the resolver for the setInstanceAnnotation field.
func (r *mutationResolver) SetInstanceAnnotation(ctx context.Context, instanceID gidx.PrefixedID, namespace string, data json.RawMessage) (*generated.InstanceMetadata, error) {
	antExists, err := r.client.InstanceMetadata.Query().Where(instancemetadata.InstanceID(instanceID), instancemetadata.Namespace(namespace)).Exist(ctx)
	if err != nil {
		return nil, err
	}

	if antExists {
		ant, err := r.client.InstanceMetadata.Query().Where(instancemetadata.InstanceID(instanceID), instancemetadata.Namespace(namespace)).First(ctx)
		if err != nil {
			return nil, err
		}
		return ant.Update().SetData(data).Save(ctx)
	}

	return r.client.InstanceMetadata.Create().SetInstanceID(instanceID).SetNamespace(namespace).SetData(data).Save(ctx)
}

// Mutation returns graphapigen.MutationResolver implementation.
func (r *Resolver) Mutation() graphapigen.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
