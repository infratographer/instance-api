package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
	"go.infratographer.com/instance-api/internal/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id uuid.UUID) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []uuid.UUID) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Instances is the resolver for the instances field.
func (r *queryResolver) Instances(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy *ent.InstanceOrder, where *ent.InstanceWhereInput) (*ent.InstanceConnection, error) {
	return r.client.Instance.Query().Paginate(ctx, after, first, before, last, ent.WithInstanceOrder(orderBy), ent.WithInstanceFilter(where.Filter))
}

// InstanceMetadataSlice is the resolver for the instanceMetadataSlice field.
func (r *queryResolver) InstanceMetadataSlice(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy *ent.InstanceMetadataOrder, where *ent.InstanceMetadataWhereInput) (*ent.InstanceMetadataConnection, error) {
	return r.client.InstanceMetadata.Query().Paginate(ctx, after, first, before, last, ent.WithInstanceMetadataOrder(orderBy), ent.WithInstanceMetadataFilter(where.Filter))
}

// InstanceProviders is the resolver for the instanceProviders field.
func (r *queryResolver) InstanceProviders(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy *ent.InstanceProviderOrder, where *ent.InstanceProviderWhereInput) (*ent.InstanceProviderConnection, error) {
	return r.client.InstanceProvider.Query().Paginate(ctx, after, first, before, last, ent.WithInstanceProviderOrder(orderBy), ent.WithInstanceProviderFilter(where.Filter))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
