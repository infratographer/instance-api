package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"go.infratographer.com/instance-api/internal/ent/generated"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	graphapigen "go.infratographer.com/instance-api/internal/graphapi/generated"
	"go.infratographer.com/x/gidx"
)

// Tenant is the resolver for the tenant field.
func (r *instanceResolver) Tenant(ctx context.Context, obj *generated.Instance) (*graphapigen.Tenant, error) {
	return &graphapigen.Tenant{ID: obj.LocationID}, nil
}

// Tenant is the resolver for the tenant field.
func (r *instanceProviderResolver) Tenant(ctx context.Context, obj *generated.InstanceProvider) (*graphapigen.Tenant, error) {
	panic(fmt.Errorf("not implemented: Tenant - tenant"))
}

// Instances is the resolver for the instances field.
func (r *tenantResolver) Instances(ctx context.Context, obj *graphapigen.Tenant, after *entgql.Cursor[gidx.PrefixedID], first *int, before *entgql.Cursor[gidx.PrefixedID], last *int, orderBy *generated.InstanceOrder, where *generated.InstanceWhereInput) (*generated.InstanceConnection, error) {
	return r.client.Instance.Query().Where(instance.TenantID(obj.ID)).Paginate(ctx, after, first, before, last, generated.WithInstanceOrder(orderBy), generated.WithInstanceFilter(where.Filter))
}

// Tenant returns graphapigen.TenantResolver implementation.
func (r *Resolver) Tenant() graphapigen.TenantResolver { return &tenantResolver{r} }

type tenantResolver struct{ *Resolver }
