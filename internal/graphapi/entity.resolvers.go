package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	ent "go.infratographer.com/instance-api/internal/ent/generated"
	graphapigen "go.infratographer.com/instance-api/internal/graphapi/generated"
	"go.infratographer.com/x/idx"
)

// FindInstanceByID is the resolver for the findInstanceByID field.
func (r *entityResolver) FindInstanceByID(ctx context.Context, id idx.PrefixedID) (*ent.Instance, error) {
	fmt.Printf("calling findInstanceByID with: %+v\n", id)
	return r.client.Instance.Get(ctx, id)
}

// FindInstanceMetadataByID is the resolver for the findInstanceMetadataByID field.
func (r *entityResolver) FindInstanceMetadataByID(ctx context.Context, id idx.PrefixedID) (*ent.InstanceMetadata, error) {
	return r.client.InstanceMetadata.Get(ctx, id)
}

// FindInstanceProviderByID is the resolver for the findInstanceProviderByID field.
func (r *entityResolver) FindInstanceProviderByID(ctx context.Context, id idx.PrefixedID) (*ent.InstanceProvider, error) {
	return r.client.InstanceProvider.Get(ctx, id)
}

// FindLocationByID is the resolver for the findLocationByID field.
func (r *entityResolver) FindLocationByID(ctx context.Context, id idx.PrefixedID) (*graphapigen.Location, error) {
	panic(fmt.Errorf("not implemented: FindLocationByID - findLocationByID"))
}

// FindTenantByID is the resolver for the findTenantByID field.
func (r *entityResolver) FindTenantByID(ctx context.Context, id idx.PrefixedID) (*graphapigen.Tenant, error) {
	panic(fmt.Errorf("not implemented: FindTenantByID - findTenantByID"))
}

// Entity returns graphapigen.EntityResolver implementation.
func (r *Resolver) Entity() graphapigen.EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
