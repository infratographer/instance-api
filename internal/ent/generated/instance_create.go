// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	"go.infratographer.com/instance-api/internal/ent/generated/instancemetadata"
	"go.infratographer.com/instance-api/internal/ent/generated/instanceprovider"
	"go.infratographer.com/x/gidx"
)

// InstanceCreate is the builder for creating a Instance entity.
type InstanceCreate struct {
	config
	mutation *InstanceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ic *InstanceCreate) SetCreatedAt(t time.Time) *InstanceCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InstanceCreate) SetNillableCreatedAt(t *time.Time) *InstanceCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InstanceCreate) SetUpdatedAt(t time.Time) *InstanceCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InstanceCreate) SetNillableUpdatedAt(t *time.Time) *InstanceCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetName sets the "name" field.
func (ic *InstanceCreate) SetName(s string) *InstanceCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetTenantID sets the "tenant_id" field.
func (ic *InstanceCreate) SetTenantID(gi gidx.PrefixedID) *InstanceCreate {
	ic.mutation.SetTenantID(gi)
	return ic
}

// SetLocationID sets the "location_id" field.
func (ic *InstanceCreate) SetLocationID(gi gidx.PrefixedID) *InstanceCreate {
	ic.mutation.SetLocationID(gi)
	return ic
}

// SetInstanceProviderID sets the "instance_provider_id" field.
func (ic *InstanceCreate) SetInstanceProviderID(gi gidx.PrefixedID) *InstanceCreate {
	ic.mutation.SetInstanceProviderID(gi)
	return ic
}

// SetID sets the "id" field.
func (ic *InstanceCreate) SetID(gi gidx.PrefixedID) *InstanceCreate {
	ic.mutation.SetID(gi)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InstanceCreate) SetNillableID(gi *gidx.PrefixedID) *InstanceCreate {
	if gi != nil {
		ic.SetID(*gi)
	}
	return ic
}

// SetInstanceProvider sets the "instance_provider" edge to the InstanceProvider entity.
func (ic *InstanceCreate) SetInstanceProvider(i *InstanceProvider) *InstanceCreate {
	return ic.SetInstanceProviderID(i.ID)
}

// AddMetadatumIDs adds the "metadata" edge to the InstanceMetadata entity by IDs.
func (ic *InstanceCreate) AddMetadatumIDs(ids ...gidx.PrefixedID) *InstanceCreate {
	ic.mutation.AddMetadatumIDs(ids...)
	return ic
}

// AddMetadata adds the "metadata" edges to the InstanceMetadata entity.
func (ic *InstanceCreate) AddMetadata(i ...*InstanceMetadata) *InstanceCreate {
	ids := make([]gidx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddMetadatumIDs(ids...)
}

// Mutation returns the InstanceMutation object of the builder.
func (ic *InstanceCreate) Mutation() *InstanceMutation {
	return ic.mutation
}

// Save creates the Instance in the database.
func (ic *InstanceCreate) Save(ctx context.Context) (*Instance, error) {
	ic.defaults()
	return withHooks[*Instance, InstanceMutation](ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstanceCreate) SaveX(ctx context.Context) *Instance {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InstanceCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InstanceCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InstanceCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := instance.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := instance.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := instance.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InstanceCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Instance.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Instance.updated_at"`)}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Instance.name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := instance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Instance.name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`generated: missing required field "Instance.tenant_id"`)}
	}
	if _, ok := ic.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`generated: missing required field "Instance.location_id"`)}
	}
	if _, ok := ic.mutation.InstanceProviderID(); !ok {
		return &ValidationError{Name: "instance_provider_id", err: errors.New(`generated: missing required field "Instance.instance_provider_id"`)}
	}
	if _, ok := ic.mutation.InstanceProviderID(); !ok {
		return &ValidationError{Name: "instance_provider", err: errors.New(`generated: missing required edge "Instance.instance_provider"`)}
	}
	return nil
}

func (ic *InstanceCreate) sqlSave(ctx context.Context) (*Instance, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InstanceCreate) createSpec() (*Instance, *sqlgraph.CreateSpec) {
	var (
		_node = &Instance{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(instance.Table, sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(instance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(instance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(instance.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.TenantID(); ok {
		_spec.SetField(instance.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ic.mutation.LocationID(); ok {
		_spec.SetField(instance.FieldLocationID, field.TypeString, value)
		_node.LocationID = value
	}
	if nodes := ic.mutation.InstanceProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instance.InstanceProviderTable,
			Columns: []string{instance.InstanceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceprovider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InstanceProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instance.MetadataTable,
			Columns: []string{instance.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstanceCreateBulk is the builder for creating many Instance entities in bulk.
type InstanceCreateBulk struct {
	config
	builders []*InstanceCreate
}

// Save creates the Instance entities in the database.
func (icb *InstanceCreateBulk) Save(ctx context.Context) ([]*Instance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Instance, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InstanceCreateBulk) SaveX(ctx context.Context) []*Instance {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InstanceCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
