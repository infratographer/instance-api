// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"encoding/json"

	"go.infratographer.com/x/gidx"
)

// CreateInstanceInput represents a mutation input for creating instances.
type CreateInstanceInput struct {
	Name               string
	TenantID           gidx.PrefixedID
	LocationID         gidx.PrefixedID
	InstanceProviderID gidx.PrefixedID
	MetadatumIDs       []gidx.PrefixedID
}

// Mutate applies the CreateInstanceInput on the InstanceMutation builder.
func (i *CreateInstanceInput) Mutate(m *InstanceMutation) {
	m.SetName(i.Name)
	m.SetTenantID(i.TenantID)
	m.SetLocationID(i.LocationID)
	m.SetInstanceProviderID(i.InstanceProviderID)
	if v := i.MetadatumIDs; len(v) > 0 {
		m.AddMetadatumIDs(v...)
	}
}

// SetInput applies the change-set in the CreateInstanceInput on the InstanceCreate builder.
func (c *InstanceCreate) SetInput(i CreateInstanceInput) *InstanceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInstanceInput represents a mutation input for updating instances.
type UpdateInstanceInput struct {
	Name               *string
	ClearMetadata      bool
	AddMetadatumIDs    []gidx.PrefixedID
	RemoveMetadatumIDs []gidx.PrefixedID
}

// Mutate applies the UpdateInstanceInput on the InstanceMutation builder.
func (i *UpdateInstanceInput) Mutate(m *InstanceMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.AddMetadatumIDs; len(v) > 0 {
		m.AddMetadatumIDs(v...)
	}
	if v := i.RemoveMetadatumIDs; len(v) > 0 {
		m.RemoveMetadatumIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateInstanceInput on the InstanceUpdate builder.
func (c *InstanceUpdate) SetInput(i UpdateInstanceInput) *InstanceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInstanceInput on the InstanceUpdateOne builder.
func (c *InstanceUpdateOne) SetInput(i UpdateInstanceInput) *InstanceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInstanceMetadataInput represents a mutation input for updating instancemetadataslice.
type UpdateInstanceMetadataInput struct {
	Namespace  *string
	Data       json.RawMessage
	AppendData json.RawMessage
}

// Mutate applies the UpdateInstanceMetadataInput on the InstanceMetadataMutation builder.
func (i *UpdateInstanceMetadataInput) Mutate(m *InstanceMetadataMutation) {
	if v := i.Namespace; v != nil {
		m.SetNamespace(*v)
	}
	if v := i.Data; v != nil {
		m.SetData(v)
	}
	if i.AppendData != nil {
		m.AppendData(i.Data)
	}
}

// SetInput applies the change-set in the UpdateInstanceMetadataInput on the InstanceMetadataUpdate builder.
func (c *InstanceMetadataUpdate) SetInput(i UpdateInstanceMetadataInput) *InstanceMetadataUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInstanceMetadataInput on the InstanceMetadataUpdateOne builder.
func (c *InstanceMetadataUpdateOne) SetInput(i UpdateInstanceMetadataInput) *InstanceMetadataUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInstanceProviderInput represents a mutation input for creating instanceproviders.
type CreateInstanceProviderInput struct {
	Name        string
	TenantID    gidx.PrefixedID
	InstanceIDs []gidx.PrefixedID
}

// Mutate applies the CreateInstanceProviderInput on the InstanceProviderMutation builder.
func (i *CreateInstanceProviderInput) Mutate(m *InstanceProviderMutation) {
	m.SetName(i.Name)
	m.SetTenantID(i.TenantID)
	if v := i.InstanceIDs; len(v) > 0 {
		m.AddInstanceIDs(v...)
	}
}

// SetInput applies the change-set in the CreateInstanceProviderInput on the InstanceProviderCreate builder.
func (c *InstanceProviderCreate) SetInput(i CreateInstanceProviderInput) *InstanceProviderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInstanceProviderInput represents a mutation input for updating instanceproviders.
type UpdateInstanceProviderInput struct {
	Name              *string
	ClearInstances    bool
	AddInstanceIDs    []gidx.PrefixedID
	RemoveInstanceIDs []gidx.PrefixedID
}

// Mutate applies the UpdateInstanceProviderInput on the InstanceProviderMutation builder.
func (i *UpdateInstanceProviderInput) Mutate(m *InstanceProviderMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearInstances {
		m.ClearInstances()
	}
	if v := i.AddInstanceIDs; len(v) > 0 {
		m.AddInstanceIDs(v...)
	}
	if v := i.RemoveInstanceIDs; len(v) > 0 {
		m.RemoveInstanceIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateInstanceProviderInput on the InstanceProviderUpdate builder.
func (c *InstanceProviderUpdate) SetInput(i UpdateInstanceProviderInput) *InstanceProviderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInstanceProviderInput on the InstanceProviderUpdateOne builder.
func (c *InstanceProviderUpdateOne) SetInput(i UpdateInstanceProviderInput) *InstanceProviderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
