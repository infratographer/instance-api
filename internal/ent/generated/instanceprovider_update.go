// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	"go.infratographer.com/instance-api/internal/ent/generated/instanceprovider"
	"go.infratographer.com/instance-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/idx"
)

// InstanceProviderUpdate is the builder for updating InstanceProvider entities.
type InstanceProviderUpdate struct {
	config
	hooks    []Hook
	mutation *InstanceProviderMutation
}

// Where appends a list predicates to the InstanceProviderUpdate builder.
func (ipu *InstanceProviderUpdate) Where(ps ...predicate.InstanceProvider) *InstanceProviderUpdate {
	ipu.mutation.Where(ps...)
	return ipu
}

// SetName sets the "name" field.
func (ipu *InstanceProviderUpdate) SetName(s string) *InstanceProviderUpdate {
	ipu.mutation.SetName(s)
	return ipu
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (ipu *InstanceProviderUpdate) AddInstanceIDs(ids ...idx.PrefixedID) *InstanceProviderUpdate {
	ipu.mutation.AddInstanceIDs(ids...)
	return ipu
}

// AddInstances adds the "instances" edges to the Instance entity.
func (ipu *InstanceProviderUpdate) AddInstances(i ...*Instance) *InstanceProviderUpdate {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipu.AddInstanceIDs(ids...)
}

// Mutation returns the InstanceProviderMutation object of the builder.
func (ipu *InstanceProviderUpdate) Mutation() *InstanceProviderMutation {
	return ipu.mutation
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (ipu *InstanceProviderUpdate) ClearInstances() *InstanceProviderUpdate {
	ipu.mutation.ClearInstances()
	return ipu
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (ipu *InstanceProviderUpdate) RemoveInstanceIDs(ids ...idx.PrefixedID) *InstanceProviderUpdate {
	ipu.mutation.RemoveInstanceIDs(ids...)
	return ipu
}

// RemoveInstances removes "instances" edges to Instance entities.
func (ipu *InstanceProviderUpdate) RemoveInstances(i ...*Instance) *InstanceProviderUpdate {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipu.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ipu *InstanceProviderUpdate) Save(ctx context.Context) (int, error) {
	ipu.defaults()
	return withHooks[int, InstanceProviderMutation](ctx, ipu.sqlSave, ipu.mutation, ipu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *InstanceProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *InstanceProviderUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *InstanceProviderUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipu *InstanceProviderUpdate) defaults() {
	if _, ok := ipu.mutation.UpdatedAt(); !ok {
		v := instanceprovider.UpdateDefaultUpdatedAt()
		ipu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipu *InstanceProviderUpdate) check() error {
	if v, ok := ipu.mutation.Name(); ok {
		if err := instanceprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "InstanceProvider.name": %w`, err)}
		}
	}
	return nil
}

func (ipu *InstanceProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ipu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceprovider.Table, instanceprovider.Columns, sqlgraph.NewFieldSpec(instanceprovider.FieldID, field.TypeString))
	if ps := ipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipu.mutation.Name(); ok {
		_spec.SetField(instanceprovider.FieldName, field.TypeString, value)
	}
	if value, ok := ipu.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if ipu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceprovider.InstancesTable,
			Columns: []string{instanceprovider.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !ipu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceprovider.InstancesTable,
			Columns: []string{instanceprovider.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceprovider.InstancesTable,
			Columns: []string{instanceprovider.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ipu.mutation.done = true
	return n, nil
}

// InstanceProviderUpdateOne is the builder for updating a single InstanceProvider entity.
type InstanceProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstanceProviderMutation
}

// SetName sets the "name" field.
func (ipuo *InstanceProviderUpdateOne) SetName(s string) *InstanceProviderUpdateOne {
	ipuo.mutation.SetName(s)
	return ipuo
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (ipuo *InstanceProviderUpdateOne) AddInstanceIDs(ids ...idx.PrefixedID) *InstanceProviderUpdateOne {
	ipuo.mutation.AddInstanceIDs(ids...)
	return ipuo
}

// AddInstances adds the "instances" edges to the Instance entity.
func (ipuo *InstanceProviderUpdateOne) AddInstances(i ...*Instance) *InstanceProviderUpdateOne {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipuo.AddInstanceIDs(ids...)
}

// Mutation returns the InstanceProviderMutation object of the builder.
func (ipuo *InstanceProviderUpdateOne) Mutation() *InstanceProviderMutation {
	return ipuo.mutation
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (ipuo *InstanceProviderUpdateOne) ClearInstances() *InstanceProviderUpdateOne {
	ipuo.mutation.ClearInstances()
	return ipuo
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (ipuo *InstanceProviderUpdateOne) RemoveInstanceIDs(ids ...idx.PrefixedID) *InstanceProviderUpdateOne {
	ipuo.mutation.RemoveInstanceIDs(ids...)
	return ipuo
}

// RemoveInstances removes "instances" edges to Instance entities.
func (ipuo *InstanceProviderUpdateOne) RemoveInstances(i ...*Instance) *InstanceProviderUpdateOne {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipuo.RemoveInstanceIDs(ids...)
}

// Where appends a list predicates to the InstanceProviderUpdate builder.
func (ipuo *InstanceProviderUpdateOne) Where(ps ...predicate.InstanceProvider) *InstanceProviderUpdateOne {
	ipuo.mutation.Where(ps...)
	return ipuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ipuo *InstanceProviderUpdateOne) Select(field string, fields ...string) *InstanceProviderUpdateOne {
	ipuo.fields = append([]string{field}, fields...)
	return ipuo
}

// Save executes the query and returns the updated InstanceProvider entity.
func (ipuo *InstanceProviderUpdateOne) Save(ctx context.Context) (*InstanceProvider, error) {
	ipuo.defaults()
	return withHooks[*InstanceProvider, InstanceProviderMutation](ctx, ipuo.sqlSave, ipuo.mutation, ipuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *InstanceProviderUpdateOne) SaveX(ctx context.Context) *InstanceProvider {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *InstanceProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *InstanceProviderUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipuo *InstanceProviderUpdateOne) defaults() {
	if _, ok := ipuo.mutation.UpdatedAt(); !ok {
		v := instanceprovider.UpdateDefaultUpdatedAt()
		ipuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipuo *InstanceProviderUpdateOne) check() error {
	if v, ok := ipuo.mutation.Name(); ok {
		if err := instanceprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "InstanceProvider.name": %w`, err)}
		}
	}
	return nil
}

func (ipuo *InstanceProviderUpdateOne) sqlSave(ctx context.Context) (_node *InstanceProvider, err error) {
	if err := ipuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceprovider.Table, instanceprovider.Columns, sqlgraph.NewFieldSpec(instanceprovider.FieldID, field.TypeString))
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "InstanceProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instanceprovider.FieldID)
		for _, f := range fields {
			if !instanceprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != instanceprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipuo.mutation.Name(); ok {
		_spec.SetField(instanceprovider.FieldName, field.TypeString, value)
	}
	if value, ok := ipuo.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if ipuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceprovider.InstancesTable,
			Columns: []string{instanceprovider.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !ipuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceprovider.InstancesTable,
			Columns: []string{instanceprovider.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceprovider.InstancesTable,
			Columns: []string{instanceprovider.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InstanceProvider{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ipuo.mutation.done = true
	return _node, nil
}
