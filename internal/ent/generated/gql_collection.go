// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	"go.infratographer.com/instance-api/internal/ent/generated/instancemetadata"
	"go.infratographer.com/instance-api/internal/ent/generated/instanceprovider"
	"go.infratographer.com/instance-api/xthings/idx"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *InstanceQuery) CollectFields(ctx context.Context, satisfies ...string) (*InstanceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *InstanceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(instance.Columns))
		selectedFields = []string{instance.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "instanceProvider":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InstanceProviderClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.withInstanceProvider = query
			if _, ok := fieldSeen[instance.FieldInstanceProviderID]; !ok {
				selectedFields = append(selectedFields, instance.FieldInstanceProviderID)
				fieldSeen[instance.FieldInstanceProviderID] = struct{}{}
			}
		case "metadata":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InstanceMetadataClient{config: i.config}).Query()
			)
			args := newInstanceMetadataPaginateArgs(fieldArgs(ctx, new(InstanceMetadataWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newInstanceMetadataPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					i.loadTotal = append(i.loadTotal, func(ctx context.Context, nodes []*Instance) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID idx.PrefixedID `sql:"instance_id"`
							Count  int            `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(instance.MetadataColumn), ids...))
						})
						if err := query.GroupBy(instance.MetadataColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[idx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					i.loadTotal = append(i.loadTotal, func(_ context.Context, nodes []*Instance) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Metadata)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "InstanceMetadata")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(instance.MetadataColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			i.WithNamedMetadata(alias, func(wq *InstanceMetadataQuery) {
				*wq = *query
			})
		case "locationID":
			if _, ok := fieldSeen[instance.FieldLocationID]; !ok {
				selectedFields = append(selectedFields, instance.FieldLocationID)
				fieldSeen[instance.FieldLocationID] = struct{}{}
			}
		case "tenantID":
			if _, ok := fieldSeen[instance.FieldTenantID]; !ok {
				selectedFields = append(selectedFields, instance.FieldTenantID)
				fieldSeen[instance.FieldTenantID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[instance.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, instance.FieldCreatedAt)
				fieldSeen[instance.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[instance.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, instance.FieldUpdatedAt)
				fieldSeen[instance.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[instance.FieldName]; !ok {
				selectedFields = append(selectedFields, instance.FieldName)
				fieldSeen[instance.FieldName] = struct{}{}
			}
		case "instanceProviderID":
			if _, ok := fieldSeen[instance.FieldInstanceProviderID]; !ok {
				selectedFields = append(selectedFields, instance.FieldInstanceProviderID)
				fieldSeen[instance.FieldInstanceProviderID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type instancePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []InstancePaginateOption
}

func newInstancePaginateArgs(rv map[string]interface{}) *instancePaginateArgs {
	args := &instancePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &InstanceOrder{Field: &InstanceOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithInstanceOrder(order))
			}
		case *InstanceOrder:
			if v != nil {
				args.opts = append(args.opts, WithInstanceOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*InstanceWhereInput); ok {
		args.opts = append(args.opts, WithInstanceFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (im *InstanceMetadataQuery) CollectFields(ctx context.Context, satisfies ...string) (*InstanceMetadataQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return im, nil
	}
	if err := im.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return im, nil
}

func (im *InstanceMetadataQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(instancemetadata.Columns))
		selectedFields = []string{instancemetadata.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "instance":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InstanceClient{config: im.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			im.withInstance = query
			if _, ok := fieldSeen[instancemetadata.FieldInstanceID]; !ok {
				selectedFields = append(selectedFields, instancemetadata.FieldInstanceID)
				fieldSeen[instancemetadata.FieldInstanceID] = struct{}{}
			}
		case "namespace":
			if _, ok := fieldSeen[instancemetadata.FieldNamespace]; !ok {
				selectedFields = append(selectedFields, instancemetadata.FieldNamespace)
				fieldSeen[instancemetadata.FieldNamespace] = struct{}{}
			}
		case "data":
			if _, ok := fieldSeen[instancemetadata.FieldData]; !ok {
				selectedFields = append(selectedFields, instancemetadata.FieldData)
				fieldSeen[instancemetadata.FieldData] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[instancemetadata.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, instancemetadata.FieldCreatedAt)
				fieldSeen[instancemetadata.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[instancemetadata.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, instancemetadata.FieldUpdatedAt)
				fieldSeen[instancemetadata.FieldUpdatedAt] = struct{}{}
			}
		case "instanceID":
			if _, ok := fieldSeen[instancemetadata.FieldInstanceID]; !ok {
				selectedFields = append(selectedFields, instancemetadata.FieldInstanceID)
				fieldSeen[instancemetadata.FieldInstanceID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		im.Select(selectedFields...)
	}
	return nil
}

type instancemetadataPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []InstanceMetadataPaginateOption
}

func newInstanceMetadataPaginateArgs(rv map[string]interface{}) *instancemetadataPaginateArgs {
	args := &instancemetadataPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &InstanceMetadataOrder{Field: &InstanceMetadataOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithInstanceMetadataOrder(order))
			}
		case *InstanceMetadataOrder:
			if v != nil {
				args.opts = append(args.opts, WithInstanceMetadataOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*InstanceMetadataWhereInput); ok {
		args.opts = append(args.opts, WithInstanceMetadataFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ip *InstanceProviderQuery) CollectFields(ctx context.Context, satisfies ...string) (*InstanceProviderQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ip, nil
	}
	if err := ip.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ip, nil
}

func (ip *InstanceProviderQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(instanceprovider.Columns))
		selectedFields = []string{instanceprovider.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "instances":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InstanceClient{config: ip.config}).Query()
			)
			args := newInstancePaginateArgs(fieldArgs(ctx, new(InstanceWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newInstancePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					ip.loadTotal = append(ip.loadTotal, func(ctx context.Context, nodes []*InstanceProvider) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID idx.PrefixedID `sql:"instance_provider_id"`
							Count  int            `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(instanceprovider.InstancesColumn), ids...))
						})
						if err := query.GroupBy(instanceprovider.InstancesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[idx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					ip.loadTotal = append(ip.loadTotal, func(_ context.Context, nodes []*InstanceProvider) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Instances)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "Instance")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(instanceprovider.InstancesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			ip.WithNamedInstances(alias, func(wq *InstanceQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[instanceprovider.FieldName]; !ok {
				selectedFields = append(selectedFields, instanceprovider.FieldName)
				fieldSeen[instanceprovider.FieldName] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[instanceprovider.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, instanceprovider.FieldCreatedAt)
				fieldSeen[instanceprovider.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[instanceprovider.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, instanceprovider.FieldUpdatedAt)
				fieldSeen[instanceprovider.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ip.Select(selectedFields...)
	}
	return nil
}

type instanceproviderPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []InstanceProviderPaginateOption
}

func newInstanceProviderPaginateArgs(rv map[string]interface{}) *instanceproviderPaginateArgs {
	args := &instanceproviderPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &InstanceProviderOrder{Field: &InstanceProviderOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithInstanceProviderOrder(order))
			}
		case *InstanceProviderOrder:
			if v != nil {
				args.opts = append(args.opts, WithInstanceProviderOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*InstanceProviderWhereInput); ok {
		args.opts = append(args.opts, WithInstanceProviderFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
