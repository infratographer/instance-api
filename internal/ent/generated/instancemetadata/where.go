// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package instancemetadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"go.infratographer.com/instance-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldUpdatedAt, v))
}

// InstanceID applies equality check predicate on the "instance_id" field. It's identical to InstanceIDEQ.
func InstanceID(v gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldInstanceID, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldNamespace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldUpdatedAt, v))
}

// InstanceIDEQ applies the EQ predicate on the "instance_id" field.
func InstanceIDEQ(v gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldInstanceID, v))
}

// InstanceIDNEQ applies the NEQ predicate on the "instance_id" field.
func InstanceIDNEQ(v gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldInstanceID, v))
}

// InstanceIDIn applies the In predicate on the "instance_id" field.
func InstanceIDIn(vs ...gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldInstanceID, vs...))
}

// InstanceIDNotIn applies the NotIn predicate on the "instance_id" field.
func InstanceIDNotIn(vs ...gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldInstanceID, vs...))
}

// InstanceIDGT applies the GT predicate on the "instance_id" field.
func InstanceIDGT(v gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldInstanceID, v))
}

// InstanceIDGTE applies the GTE predicate on the "instance_id" field.
func InstanceIDGTE(v gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldInstanceID, v))
}

// InstanceIDLT applies the LT predicate on the "instance_id" field.
func InstanceIDLT(v gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldInstanceID, v))
}

// InstanceIDLTE applies the LTE predicate on the "instance_id" field.
func InstanceIDLTE(v gidx.PrefixedID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldInstanceID, v))
}

// InstanceIDContains applies the Contains predicate on the "instance_id" field.
func InstanceIDContains(v gidx.PrefixedID) predicate.InstanceMetadata {
	vc := string(v)
	return predicate.InstanceMetadata(sql.FieldContains(FieldInstanceID, vc))
}

// InstanceIDHasPrefix applies the HasPrefix predicate on the "instance_id" field.
func InstanceIDHasPrefix(v gidx.PrefixedID) predicate.InstanceMetadata {
	vc := string(v)
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldInstanceID, vc))
}

// InstanceIDHasSuffix applies the HasSuffix predicate on the "instance_id" field.
func InstanceIDHasSuffix(v gidx.PrefixedID) predicate.InstanceMetadata {
	vc := string(v)
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldInstanceID, vc))
}

// InstanceIDEqualFold applies the EqualFold predicate on the "instance_id" field.
func InstanceIDEqualFold(v gidx.PrefixedID) predicate.InstanceMetadata {
	vc := string(v)
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldInstanceID, vc))
}

// InstanceIDContainsFold applies the ContainsFold predicate on the "instance_id" field.
func InstanceIDContainsFold(v gidx.PrefixedID) predicate.InstanceMetadata {
	vc := string(v)
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldInstanceID, vc))
}

// HasInstance applies the HasEdge predicate on the "instance" edge.
func HasInstance() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstanceWith applies the HasEdge predicate on the "instance" edge with a given conditions (other predicates).
func HasInstanceWith(preds ...predicate.Instance) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := newInstanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InstanceMetadata) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InstanceMetadata) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InstanceMetadata) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		p(s.Not())
	})
}

// DataHasKey checks if Data contains given value
func DataHasKey(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		s.Where(sqljson.HasKey(s.C(FieldData), sqljson.DotPath(v)))
	})
}
