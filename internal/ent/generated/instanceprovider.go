// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/instance-api/internal/ent/generated/instanceprovider"
	"go.infratographer.com/instance-api/xthings/idx"
)

// InstanceProvider is the model entity for the InstanceProvider schema.
type InstanceProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID idx.PrefixedID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstanceProviderQuery when eager-loading is set.
	Edges        InstanceProviderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InstanceProviderEdges holds the relations/edges for other nodes in the graph.
type InstanceProviderEdges struct {
	// Instances holds the value of the instances edge.
	Instances []*Instance `json:"instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedInstances map[string][]*Instance
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e InstanceProviderEdges) InstancesOrErr() ([]*Instance, error) {
	if e.loadedTypes[0] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstanceProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case instanceprovider.FieldID:
			values[i] = new(idx.PrefixedID)
		case instanceprovider.FieldName:
			values[i] = new(sql.NullString)
		case instanceprovider.FieldCreatedAt, instanceprovider.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstanceProvider fields.
func (ip *InstanceProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case instanceprovider.FieldID:
			if value, ok := values[i].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ip.ID = *value
			}
		case instanceprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ip.Name = value.String
			}
		case instanceprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ip.CreatedAt = value.Time
			}
		case instanceprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ip.UpdatedAt = value.Time
			}
		default:
			ip.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InstanceProvider.
// This includes values selected through modifiers, order, etc.
func (ip *InstanceProvider) Value(name string) (ent.Value, error) {
	return ip.selectValues.Get(name)
}

// QueryInstances queries the "instances" edge of the InstanceProvider entity.
func (ip *InstanceProvider) QueryInstances() *InstanceQuery {
	return NewInstanceProviderClient(ip.config).QueryInstances(ip)
}

// Update returns a builder for updating this InstanceProvider.
// Note that you need to call InstanceProvider.Unwrap() before calling this method if this InstanceProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (ip *InstanceProvider) Update() *InstanceProviderUpdateOne {
	return NewInstanceProviderClient(ip.config).UpdateOne(ip)
}

// Unwrap unwraps the InstanceProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ip *InstanceProvider) Unwrap() *InstanceProvider {
	_tx, ok := ip.config.driver.(*txDriver)
	if !ok {
		panic("generated: InstanceProvider is not a transactional entity")
	}
	ip.config.driver = _tx.drv
	return ip
}

// String implements the fmt.Stringer.
func (ip *InstanceProvider) String() string {
	var builder strings.Builder
	builder.WriteString("InstanceProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ip.ID))
	builder.WriteString("name=")
	builder.WriteString(ip.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ip.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ip.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (ip InstanceProvider) IsEntity() {}

// NamedInstances returns the Instances named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ip *InstanceProvider) NamedInstances(name string) ([]*Instance, error) {
	if ip.Edges.namedInstances == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ip.Edges.namedInstances[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ip *InstanceProvider) appendNamedInstances(name string, edges ...*Instance) {
	if ip.Edges.namedInstances == nil {
		ip.Edges.namedInstances = make(map[string][]*Instance)
	}
	if len(edges) == 0 {
		ip.Edges.namedInstances[name] = []*Instance{}
	} else {
		ip.Edges.namedInstances[name] = append(ip.Edges.namedInstances[name], edges...)
	}
}

// InstanceProviders is a parsable slice of InstanceProvider.
type InstanceProviders []*InstanceProvider
