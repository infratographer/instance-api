// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	"go.infratographer.com/instance-api/internal/ent/generated/instancemetadata"
	"go.infratographer.com/instance-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/idx"
)

// InstanceUpdate is the builder for updating Instance entities.
type InstanceUpdate struct {
	config
	hooks    []Hook
	mutation *InstanceMutation
}

// Where appends a list predicates to the InstanceUpdate builder.
func (iu *InstanceUpdate) Where(ps ...predicate.Instance) *InstanceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *InstanceUpdate) SetName(s string) *InstanceUpdate {
	iu.mutation.SetName(s)
	return iu
}

// AddMetadatumIDs adds the "metadata" edge to the InstanceMetadata entity by IDs.
func (iu *InstanceUpdate) AddMetadatumIDs(ids ...idx.PrefixedID) *InstanceUpdate {
	iu.mutation.AddMetadatumIDs(ids...)
	return iu
}

// AddMetadata adds the "metadata" edges to the InstanceMetadata entity.
func (iu *InstanceUpdate) AddMetadata(i ...*InstanceMetadata) *InstanceUpdate {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddMetadatumIDs(ids...)
}

// Mutation returns the InstanceMutation object of the builder.
func (iu *InstanceUpdate) Mutation() *InstanceMutation {
	return iu.mutation
}

// ClearMetadata clears all "metadata" edges to the InstanceMetadata entity.
func (iu *InstanceUpdate) ClearMetadata() *InstanceUpdate {
	iu.mutation.ClearMetadata()
	return iu
}

// RemoveMetadatumIDs removes the "metadata" edge to InstanceMetadata entities by IDs.
func (iu *InstanceUpdate) RemoveMetadatumIDs(ids ...idx.PrefixedID) *InstanceUpdate {
	iu.mutation.RemoveMetadatumIDs(ids...)
	return iu
}

// RemoveMetadata removes "metadata" edges to InstanceMetadata entities.
func (iu *InstanceUpdate) RemoveMetadata(i ...*InstanceMetadata) *InstanceUpdate {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveMetadatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstanceUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks[int, InstanceMutation](ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstanceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstanceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InstanceUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := instance.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InstanceUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := instance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Instance.name": %w`, err)}
		}
	}
	if _, ok := iu.mutation.InstanceProviderID(); iu.mutation.InstanceProviderCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Instance.instance_provider"`)
	}
	return nil
}

func (iu *InstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(instance.Table, instance.Columns, sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iu.mutation.LocationIDCleared() {
		_spec.ClearField(instance.FieldLocationID, field.TypeString)
	}
	if iu.mutation.TenantIDCleared() {
		_spec.ClearField(instance.FieldTenantID, field.TypeString)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(instance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(instance.FieldName, field.TypeString, value)
	}
	if iu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instance.MetadataTable,
			Columns: []string{instance.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !iu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instance.MetadataTable,
			Columns: []string{instance.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instance.MetadataTable,
			Columns: []string{instance.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstanceUpdateOne is the builder for updating a single Instance entity.
type InstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstanceMutation
}

// SetName sets the "name" field.
func (iuo *InstanceUpdateOne) SetName(s string) *InstanceUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// AddMetadatumIDs adds the "metadata" edge to the InstanceMetadata entity by IDs.
func (iuo *InstanceUpdateOne) AddMetadatumIDs(ids ...idx.PrefixedID) *InstanceUpdateOne {
	iuo.mutation.AddMetadatumIDs(ids...)
	return iuo
}

// AddMetadata adds the "metadata" edges to the InstanceMetadata entity.
func (iuo *InstanceUpdateOne) AddMetadata(i ...*InstanceMetadata) *InstanceUpdateOne {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddMetadatumIDs(ids...)
}

// Mutation returns the InstanceMutation object of the builder.
func (iuo *InstanceUpdateOne) Mutation() *InstanceMutation {
	return iuo.mutation
}

// ClearMetadata clears all "metadata" edges to the InstanceMetadata entity.
func (iuo *InstanceUpdateOne) ClearMetadata() *InstanceUpdateOne {
	iuo.mutation.ClearMetadata()
	return iuo
}

// RemoveMetadatumIDs removes the "metadata" edge to InstanceMetadata entities by IDs.
func (iuo *InstanceUpdateOne) RemoveMetadatumIDs(ids ...idx.PrefixedID) *InstanceUpdateOne {
	iuo.mutation.RemoveMetadatumIDs(ids...)
	return iuo
}

// RemoveMetadata removes "metadata" edges to InstanceMetadata entities.
func (iuo *InstanceUpdateOne) RemoveMetadata(i ...*InstanceMetadata) *InstanceUpdateOne {
	ids := make([]idx.PrefixedID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveMetadatumIDs(ids...)
}

// Where appends a list predicates to the InstanceUpdate builder.
func (iuo *InstanceUpdateOne) Where(ps ...predicate.Instance) *InstanceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstanceUpdateOne) Select(field string, fields ...string) *InstanceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Instance entity.
func (iuo *InstanceUpdateOne) Save(ctx context.Context) (*Instance, error) {
	iuo.defaults()
	return withHooks[*Instance, InstanceMutation](ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstanceUpdateOne) SaveX(ctx context.Context) *Instance {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstanceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InstanceUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := instance.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InstanceUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := instance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Instance.name": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.InstanceProviderID(); iuo.mutation.InstanceProviderCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Instance.instance_provider"`)
	}
	return nil
}

func (iuo *InstanceUpdateOne) sqlSave(ctx context.Context) (_node *Instance, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(instance.Table, instance.Columns, sqlgraph.NewFieldSpec(instance.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Instance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instance.FieldID)
		for _, f := range fields {
			if !instance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != instance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iuo.mutation.LocationIDCleared() {
		_spec.ClearField(instance.FieldLocationID, field.TypeString)
	}
	if iuo.mutation.TenantIDCleared() {
		_spec.ClearField(instance.FieldTenantID, field.TypeString)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(instance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(instance.FieldName, field.TypeString, value)
	}
	if iuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instance.MetadataTable,
			Columns: []string{instance.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !iuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instance.MetadataTable,
			Columns: []string{instance.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instance.MetadataTable,
			Columns: []string{instance.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Instance{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
