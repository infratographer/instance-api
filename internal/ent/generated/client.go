// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"

	"go.infratographer.com/instance-api/internal/ent/generated/migrate"
	"go.infratographer.com/x/idx"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	"go.infratographer.com/instance-api/internal/ent/generated/instancemetadata"
	"go.infratographer.com/instance-api/internal/ent/generated/instanceprovider"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Instance is the client for interacting with the Instance builders.
	Instance *InstanceClient
	// InstanceMetadata is the client for interacting with the InstanceMetadata builders.
	InstanceMetadata *InstanceMetadataClient
	// InstanceProvider is the client for interacting with the InstanceProvider builders.
	InstanceProvider *InstanceProviderClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Instance = NewInstanceClient(c.config)
	c.InstanceMetadata = NewInstanceMetadataClient(c.config)
	c.InstanceProvider = NewInstanceProviderClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("generated: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Instance:         NewInstanceClient(cfg),
		InstanceMetadata: NewInstanceMetadataClient(cfg),
		InstanceProvider: NewInstanceProviderClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Instance:         NewInstanceClient(cfg),
		InstanceMetadata: NewInstanceMetadataClient(cfg),
		InstanceProvider: NewInstanceProviderClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Instance.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Instance.Use(hooks...)
	c.InstanceMetadata.Use(hooks...)
	c.InstanceProvider.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Instance.Intercept(interceptors...)
	c.InstanceMetadata.Intercept(interceptors...)
	c.InstanceProvider.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *InstanceMutation:
		return c.Instance.mutate(ctx, m)
	case *InstanceMetadataMutation:
		return c.InstanceMetadata.mutate(ctx, m)
	case *InstanceProviderMutation:
		return c.InstanceProvider.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// InstanceClient is a client for the Instance schema.
type InstanceClient struct {
	config
}

// NewInstanceClient returns a client for the Instance from the given config.
func NewInstanceClient(c config) *InstanceClient {
	return &InstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instance.Hooks(f(g(h())))`.
func (c *InstanceClient) Use(hooks ...Hook) {
	c.hooks.Instance = append(c.hooks.Instance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `instance.Intercept(f(g(h())))`.
func (c *InstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Instance = append(c.inters.Instance, interceptors...)
}

// Create returns a builder for creating a Instance entity.
func (c *InstanceClient) Create() *InstanceCreate {
	mutation := newInstanceMutation(c.config, OpCreate)
	return &InstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Instance entities.
func (c *InstanceClient) CreateBulk(builders ...*InstanceCreate) *InstanceCreateBulk {
	return &InstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Instance.
func (c *InstanceClient) Update() *InstanceUpdate {
	mutation := newInstanceMutation(c.config, OpUpdate)
	return &InstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstanceClient) UpdateOne(i *Instance) *InstanceUpdateOne {
	mutation := newInstanceMutation(c.config, OpUpdateOne, withInstance(i))
	return &InstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstanceClient) UpdateOneID(id idx.PrefixedID) *InstanceUpdateOne {
	mutation := newInstanceMutation(c.config, OpUpdateOne, withInstanceID(id))
	return &InstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Instance.
func (c *InstanceClient) Delete() *InstanceDelete {
	mutation := newInstanceMutation(c.config, OpDelete)
	return &InstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstanceClient) DeleteOne(i *Instance) *InstanceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstanceClient) DeleteOneID(id idx.PrefixedID) *InstanceDeleteOne {
	builder := c.Delete().Where(instance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstanceDeleteOne{builder}
}

// Query returns a query builder for Instance.
func (c *InstanceClient) Query() *InstanceQuery {
	return &InstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a Instance entity by its id.
func (c *InstanceClient) Get(ctx context.Context, id idx.PrefixedID) (*Instance, error) {
	return c.Query().Where(instance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstanceClient) GetX(ctx context.Context, id idx.PrefixedID) *Instance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstanceProvider queries the instance_provider edge of a Instance.
func (c *InstanceClient) QueryInstanceProvider(i *Instance) *InstanceProviderQuery {
	query := (&InstanceProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instance.Table, instance.FieldID, id),
			sqlgraph.To(instanceprovider.Table, instanceprovider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instance.InstanceProviderTable, instance.InstanceProviderColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMetadata queries the metadata edge of a Instance.
func (c *InstanceClient) QueryMetadata(i *Instance) *InstanceMetadataQuery {
	query := (&InstanceMetadataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instance.Table, instance.FieldID, id),
			sqlgraph.To(instancemetadata.Table, instancemetadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, instance.MetadataTable, instance.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstanceClient) Hooks() []Hook {
	return c.hooks.Instance
}

// Interceptors returns the client interceptors.
func (c *InstanceClient) Interceptors() []Interceptor {
	return c.inters.Instance
}

func (c *InstanceClient) mutate(ctx context.Context, m *InstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Instance mutation op: %q", m.Op())
	}
}

// InstanceMetadataClient is a client for the InstanceMetadata schema.
type InstanceMetadataClient struct {
	config
}

// NewInstanceMetadataClient returns a client for the InstanceMetadata from the given config.
func NewInstanceMetadataClient(c config) *InstanceMetadataClient {
	return &InstanceMetadataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instancemetadata.Hooks(f(g(h())))`.
func (c *InstanceMetadataClient) Use(hooks ...Hook) {
	c.hooks.InstanceMetadata = append(c.hooks.InstanceMetadata, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `instancemetadata.Intercept(f(g(h())))`.
func (c *InstanceMetadataClient) Intercept(interceptors ...Interceptor) {
	c.inters.InstanceMetadata = append(c.inters.InstanceMetadata, interceptors...)
}

// Create returns a builder for creating a InstanceMetadata entity.
func (c *InstanceMetadataClient) Create() *InstanceMetadataCreate {
	mutation := newInstanceMetadataMutation(c.config, OpCreate)
	return &InstanceMetadataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstanceMetadata entities.
func (c *InstanceMetadataClient) CreateBulk(builders ...*InstanceMetadataCreate) *InstanceMetadataCreateBulk {
	return &InstanceMetadataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstanceMetadata.
func (c *InstanceMetadataClient) Update() *InstanceMetadataUpdate {
	mutation := newInstanceMetadataMutation(c.config, OpUpdate)
	return &InstanceMetadataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstanceMetadataClient) UpdateOne(im *InstanceMetadata) *InstanceMetadataUpdateOne {
	mutation := newInstanceMetadataMutation(c.config, OpUpdateOne, withInstanceMetadata(im))
	return &InstanceMetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstanceMetadataClient) UpdateOneID(id idx.PrefixedID) *InstanceMetadataUpdateOne {
	mutation := newInstanceMetadataMutation(c.config, OpUpdateOne, withInstanceMetadataID(id))
	return &InstanceMetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstanceMetadata.
func (c *InstanceMetadataClient) Delete() *InstanceMetadataDelete {
	mutation := newInstanceMetadataMutation(c.config, OpDelete)
	return &InstanceMetadataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstanceMetadataClient) DeleteOne(im *InstanceMetadata) *InstanceMetadataDeleteOne {
	return c.DeleteOneID(im.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstanceMetadataClient) DeleteOneID(id idx.PrefixedID) *InstanceMetadataDeleteOne {
	builder := c.Delete().Where(instancemetadata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstanceMetadataDeleteOne{builder}
}

// Query returns a query builder for InstanceMetadata.
func (c *InstanceMetadataClient) Query() *InstanceMetadataQuery {
	return &InstanceMetadataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstanceMetadata},
		inters: c.Interceptors(),
	}
}

// Get returns a InstanceMetadata entity by its id.
func (c *InstanceMetadataClient) Get(ctx context.Context, id idx.PrefixedID) (*InstanceMetadata, error) {
	return c.Query().Where(instancemetadata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstanceMetadataClient) GetX(ctx context.Context, id idx.PrefixedID) *InstanceMetadata {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstance queries the instance edge of a InstanceMetadata.
func (c *InstanceMetadataClient) QueryInstance(im *InstanceMetadata) *InstanceQuery {
	query := (&InstanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := im.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instancemetadata.Table, instancemetadata.FieldID, id),
			sqlgraph.To(instance.Table, instance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instancemetadata.InstanceTable, instancemetadata.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(im.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstanceMetadataClient) Hooks() []Hook {
	return c.hooks.InstanceMetadata
}

// Interceptors returns the client interceptors.
func (c *InstanceMetadataClient) Interceptors() []Interceptor {
	return c.inters.InstanceMetadata
}

func (c *InstanceMetadataClient) mutate(ctx context.Context, m *InstanceMetadataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstanceMetadataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstanceMetadataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstanceMetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstanceMetadataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown InstanceMetadata mutation op: %q", m.Op())
	}
}

// InstanceProviderClient is a client for the InstanceProvider schema.
type InstanceProviderClient struct {
	config
}

// NewInstanceProviderClient returns a client for the InstanceProvider from the given config.
func NewInstanceProviderClient(c config) *InstanceProviderClient {
	return &InstanceProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instanceprovider.Hooks(f(g(h())))`.
func (c *InstanceProviderClient) Use(hooks ...Hook) {
	c.hooks.InstanceProvider = append(c.hooks.InstanceProvider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `instanceprovider.Intercept(f(g(h())))`.
func (c *InstanceProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.InstanceProvider = append(c.inters.InstanceProvider, interceptors...)
}

// Create returns a builder for creating a InstanceProvider entity.
func (c *InstanceProviderClient) Create() *InstanceProviderCreate {
	mutation := newInstanceProviderMutation(c.config, OpCreate)
	return &InstanceProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstanceProvider entities.
func (c *InstanceProviderClient) CreateBulk(builders ...*InstanceProviderCreate) *InstanceProviderCreateBulk {
	return &InstanceProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstanceProvider.
func (c *InstanceProviderClient) Update() *InstanceProviderUpdate {
	mutation := newInstanceProviderMutation(c.config, OpUpdate)
	return &InstanceProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstanceProviderClient) UpdateOne(ip *InstanceProvider) *InstanceProviderUpdateOne {
	mutation := newInstanceProviderMutation(c.config, OpUpdateOne, withInstanceProvider(ip))
	return &InstanceProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstanceProviderClient) UpdateOneID(id idx.PrefixedID) *InstanceProviderUpdateOne {
	mutation := newInstanceProviderMutation(c.config, OpUpdateOne, withInstanceProviderID(id))
	return &InstanceProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstanceProvider.
func (c *InstanceProviderClient) Delete() *InstanceProviderDelete {
	mutation := newInstanceProviderMutation(c.config, OpDelete)
	return &InstanceProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstanceProviderClient) DeleteOne(ip *InstanceProvider) *InstanceProviderDeleteOne {
	return c.DeleteOneID(ip.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstanceProviderClient) DeleteOneID(id idx.PrefixedID) *InstanceProviderDeleteOne {
	builder := c.Delete().Where(instanceprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstanceProviderDeleteOne{builder}
}

// Query returns a query builder for InstanceProvider.
func (c *InstanceProviderClient) Query() *InstanceProviderQuery {
	return &InstanceProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstanceProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a InstanceProvider entity by its id.
func (c *InstanceProviderClient) Get(ctx context.Context, id idx.PrefixedID) (*InstanceProvider, error) {
	return c.Query().Where(instanceprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstanceProviderClient) GetX(ctx context.Context, id idx.PrefixedID) *InstanceProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstances queries the instances edge of a InstanceProvider.
func (c *InstanceProviderClient) QueryInstances(ip *InstanceProvider) *InstanceQuery {
	query := (&InstanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceprovider.Table, instanceprovider.FieldID, id),
			sqlgraph.To(instance.Table, instance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, instanceprovider.InstancesTable, instanceprovider.InstancesColumn),
		)
		fromV = sqlgraph.Neighbors(ip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstanceProviderClient) Hooks() []Hook {
	return c.hooks.InstanceProvider
}

// Interceptors returns the client interceptors.
func (c *InstanceProviderClient) Interceptors() []Interceptor {
	return c.inters.InstanceProvider
}

func (c *InstanceProviderClient) mutate(ctx context.Context, m *InstanceProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstanceProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstanceProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstanceProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstanceProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown InstanceProvider mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Instance, InstanceMetadata, InstanceProvider []ent.Hook
	}
	inters struct {
		Instance, InstanceMetadata, InstanceProvider []ent.Interceptor
	}
)
