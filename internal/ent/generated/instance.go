// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	"go.infratographer.com/instance-api/internal/ent/generated/instanceprovider"
	"go.infratographer.com/x/idx"
)

// Instance is the model entity for the Instance schema.
type Instance struct {
	config `json:"-"`
	// ID of the ent.
	ID idx.PrefixedID `json:"id,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID idx.PrefixedID `json:"location_id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID idx.PrefixedID `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// InstanceProviderID holds the value of the "instance_provider_id" field.
	InstanceProviderID idx.PrefixedID `json:"instance_provider_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstanceQuery when eager-loading is set.
	Edges        InstanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InstanceEdges holds the relations/edges for other nodes in the graph.
type InstanceEdges struct {
	// InstanceProvider holds the value of the instance_provider edge.
	InstanceProvider *InstanceProvider `json:"instance_provider,omitempty"`
	// Metadata holds the value of the metadata edge.
	Metadata []*InstanceMetadata `json:"metadata,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedMetadata map[string][]*InstanceMetadata
}

// InstanceProviderOrErr returns the InstanceProvider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceEdges) InstanceProviderOrErr() (*InstanceProvider, error) {
	if e.loadedTypes[0] {
		if e.InstanceProvider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: instanceprovider.Label}
		}
		return e.InstanceProvider, nil
	}
	return nil, &NotLoadedError{edge: "instance_provider"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading.
func (e InstanceEdges) MetadataOrErr() ([]*InstanceMetadata, error) {
	if e.loadedTypes[1] {
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Instance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case instance.FieldID, instance.FieldLocationID, instance.FieldTenantID, instance.FieldInstanceProviderID:
			values[i] = new(idx.PrefixedID)
		case instance.FieldName:
			values[i] = new(sql.NullString)
		case instance.FieldCreatedAt, instance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Instance fields.
func (i *Instance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case instance.FieldID:
			if value, ok := values[j].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case instance.FieldLocationID:
			if value, ok := values[j].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[j])
			} else if value != nil {
				i.LocationID = *value
			}
		case instance.FieldTenantID:
			if value, ok := values[j].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[j])
			} else if value != nil {
				i.TenantID = *value
			}
		case instance.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case instance.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case instance.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case instance.FieldInstanceProviderID:
			if value, ok := values[j].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field instance_provider_id", values[j])
			} else if value != nil {
				i.InstanceProviderID = *value
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Instance.
// This includes values selected through modifiers, order, etc.
func (i *Instance) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryInstanceProvider queries the "instance_provider" edge of the Instance entity.
func (i *Instance) QueryInstanceProvider() *InstanceProviderQuery {
	return NewInstanceClient(i.config).QueryInstanceProvider(i)
}

// QueryMetadata queries the "metadata" edge of the Instance entity.
func (i *Instance) QueryMetadata() *InstanceMetadataQuery {
	return NewInstanceClient(i.config).QueryMetadata(i)
}

// Update returns a builder for updating this Instance.
// Note that you need to call Instance.Unwrap() before calling this method if this Instance
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Instance) Update() *InstanceUpdateOne {
	return NewInstanceClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Instance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Instance) Unwrap() *Instance {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("generated: Instance is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Instance) String() string {
	var builder strings.Builder
	builder.WriteString("Instance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", i.LocationID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", i.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("instance_provider_id=")
	builder.WriteString(fmt.Sprintf("%v", i.InstanceProviderID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (i Instance) IsEntity() {}

// NamedMetadata returns the Metadata named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Instance) NamedMetadata(name string) ([]*InstanceMetadata, error) {
	if i.Edges.namedMetadata == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedMetadata[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Instance) appendNamedMetadata(name string, edges ...*InstanceMetadata) {
	if i.Edges.namedMetadata == nil {
		i.Edges.namedMetadata = make(map[string][]*InstanceMetadata)
	}
	if len(edges) == 0 {
		i.Edges.namedMetadata[name] = []*InstanceMetadata{}
	} else {
		i.Edges.namedMetadata[name] = append(i.Edges.namedMetadata[name], edges...)
	}
}

// Instances is a parsable slice of Instance.
type Instances []*Instance
