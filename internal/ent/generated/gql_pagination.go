// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.infratographer.com/instance-api/internal/ent/generated/instance"
	"go.infratographer.com/instance-api/internal/ent/generated/instancemetadata"
	"go.infratographer.com/instance-api/internal/ent/generated/instanceprovider"
	"go.infratographer.com/x/gidx"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[gidx.PrefixedID]
	PageInfo       = entgql.PageInfo[gidx.PrefixedID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// InstanceEdge is the edge representation of Instance.
type InstanceEdge struct {
	Node   *Instance `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// InstanceConnection is the connection containing edges to Instance.
type InstanceConnection struct {
	Edges      []*InstanceEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *InstanceConnection) build(nodes []*Instance, pager *instancePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Instance
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Instance {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Instance {
			return nodes[i]
		}
	}
	c.Edges = make([]*InstanceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InstanceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InstancePaginateOption enables pagination customization.
type InstancePaginateOption func(*instancePager) error

// WithInstanceOrder configures pagination ordering.
func WithInstanceOrder(order *InstanceOrder) InstancePaginateOption {
	if order == nil {
		order = DefaultInstanceOrder
	}
	o := *order
	return func(pager *instancePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInstanceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInstanceFilter configures pagination filter.
func WithInstanceFilter(filter func(*InstanceQuery) (*InstanceQuery, error)) InstancePaginateOption {
	return func(pager *instancePager) error {
		if filter == nil {
			return errors.New("InstanceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type instancePager struct {
	reverse bool
	order   *InstanceOrder
	filter  func(*InstanceQuery) (*InstanceQuery, error)
}

func newInstancePager(opts []InstancePaginateOption, reverse bool) (*instancePager, error) {
	pager := &instancePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInstanceOrder
	}
	return pager, nil
}

func (p *instancePager) applyFilter(query *InstanceQuery) (*InstanceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *instancePager) toCursor(i *Instance) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *instancePager) applyCursors(query *InstanceQuery, after, before *Cursor) (*InstanceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultInstanceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *instancePager) applyOrder(query *InstanceQuery) *InstanceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultInstanceOrder.Field {
		query = query.Order(DefaultInstanceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *instancePager) orderExpr(query *InstanceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInstanceOrder.Field {
			b.Comma().Ident(DefaultInstanceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Instance.
func (i *InstanceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InstancePaginateOption,
) (*InstanceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInstancePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}
	conn := &InstanceConnection{Edges: []*InstanceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = i.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if i, err = pager.applyCursors(i, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		i.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := i.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	i = pager.applyOrder(i)
	nodes, err := i.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// InstanceOrderFieldName orders Instance by name.
	InstanceOrderFieldName = &InstanceOrderField{
		Value: func(i *Instance) (ent.Value, error) {
			return i.Name, nil
		},
		column: instance.FieldName,
		toTerm: instance.ByName,
		toCursor: func(i *Instance) Cursor {
			return Cursor{
				ID:    i.ID,
				Value: i.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f InstanceOrderField) String() string {
	var str string
	switch f.column {
	case InstanceOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f InstanceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *InstanceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("InstanceOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *InstanceOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid InstanceOrderField", str)
	}
	return nil
}

// InstanceOrderField defines the ordering field of Instance.
type InstanceOrderField struct {
	// Value extracts the ordering value from the given Instance.
	Value    func(*Instance) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) instance.OrderOption
	toCursor func(*Instance) Cursor
}

// InstanceOrder defines the ordering of Instance.
type InstanceOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *InstanceOrderField `json:"field"`
}

// DefaultInstanceOrder is the default ordering of Instance.
var DefaultInstanceOrder = &InstanceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &InstanceOrderField{
		Value: func(i *Instance) (ent.Value, error) {
			return i.ID, nil
		},
		column: instance.FieldID,
		toTerm: instance.ByID,
		toCursor: func(i *Instance) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Instance into InstanceEdge.
func (i *Instance) ToEdge(order *InstanceOrder) *InstanceEdge {
	if order == nil {
		order = DefaultInstanceOrder
	}
	return &InstanceEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// InstanceMetadataEdge is the edge representation of InstanceMetadata.
type InstanceMetadataEdge struct {
	Node   *InstanceMetadata `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// InstanceMetadataConnection is the connection containing edges to InstanceMetadata.
type InstanceMetadataConnection struct {
	Edges      []*InstanceMetadataEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *InstanceMetadataConnection) build(nodes []*InstanceMetadata, pager *instancemetadataPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *InstanceMetadata
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *InstanceMetadata {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *InstanceMetadata {
			return nodes[i]
		}
	}
	c.Edges = make([]*InstanceMetadataEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InstanceMetadataEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InstanceMetadataPaginateOption enables pagination customization.
type InstanceMetadataPaginateOption func(*instancemetadataPager) error

// WithInstanceMetadataOrder configures pagination ordering.
func WithInstanceMetadataOrder(order *InstanceMetadataOrder) InstanceMetadataPaginateOption {
	if order == nil {
		order = DefaultInstanceMetadataOrder
	}
	o := *order
	return func(pager *instancemetadataPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInstanceMetadataOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInstanceMetadataFilter configures pagination filter.
func WithInstanceMetadataFilter(filter func(*InstanceMetadataQuery) (*InstanceMetadataQuery, error)) InstanceMetadataPaginateOption {
	return func(pager *instancemetadataPager) error {
		if filter == nil {
			return errors.New("InstanceMetadataQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type instancemetadataPager struct {
	reverse bool
	order   *InstanceMetadataOrder
	filter  func(*InstanceMetadataQuery) (*InstanceMetadataQuery, error)
}

func newInstanceMetadataPager(opts []InstanceMetadataPaginateOption, reverse bool) (*instancemetadataPager, error) {
	pager := &instancemetadataPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInstanceMetadataOrder
	}
	return pager, nil
}

func (p *instancemetadataPager) applyFilter(query *InstanceMetadataQuery) (*InstanceMetadataQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *instancemetadataPager) toCursor(im *InstanceMetadata) Cursor {
	return p.order.Field.toCursor(im)
}

func (p *instancemetadataPager) applyCursors(query *InstanceMetadataQuery, after, before *Cursor) (*InstanceMetadataQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultInstanceMetadataOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *instancemetadataPager) applyOrder(query *InstanceMetadataQuery) *InstanceMetadataQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultInstanceMetadataOrder.Field {
		query = query.Order(DefaultInstanceMetadataOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *instancemetadataPager) orderExpr(query *InstanceMetadataQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInstanceMetadataOrder.Field {
			b.Comma().Ident(DefaultInstanceMetadataOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to InstanceMetadata.
func (im *InstanceMetadataQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InstanceMetadataPaginateOption,
) (*InstanceMetadataConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInstanceMetadataPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if im, err = pager.applyFilter(im); err != nil {
		return nil, err
	}
	conn := &InstanceMetadataConnection{Edges: []*InstanceMetadataEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = im.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if im, err = pager.applyCursors(im, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		im.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := im.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	im = pager.applyOrder(im)
	nodes, err := im.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// InstanceMetadataOrderFieldNamespace orders InstanceMetadata by namespace.
	InstanceMetadataOrderFieldNamespace = &InstanceMetadataOrderField{
		Value: func(im *InstanceMetadata) (ent.Value, error) {
			return im.Namespace, nil
		},
		column: instancemetadata.FieldNamespace,
		toTerm: instancemetadata.ByNamespace,
		toCursor: func(im *InstanceMetadata) Cursor {
			return Cursor{
				ID:    im.ID,
				Value: im.Namespace,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f InstanceMetadataOrderField) String() string {
	var str string
	switch f.column {
	case InstanceMetadataOrderFieldNamespace.column:
		str = "NAMESPACE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f InstanceMetadataOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *InstanceMetadataOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("InstanceMetadataOrderField %T must be a string", v)
	}
	switch str {
	case "NAMESPACE":
		*f = *InstanceMetadataOrderFieldNamespace
	default:
		return fmt.Errorf("%s is not a valid InstanceMetadataOrderField", str)
	}
	return nil
}

// InstanceMetadataOrderField defines the ordering field of InstanceMetadata.
type InstanceMetadataOrderField struct {
	// Value extracts the ordering value from the given InstanceMetadata.
	Value    func(*InstanceMetadata) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) instancemetadata.OrderOption
	toCursor func(*InstanceMetadata) Cursor
}

// InstanceMetadataOrder defines the ordering of InstanceMetadata.
type InstanceMetadataOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *InstanceMetadataOrderField `json:"field"`
}

// DefaultInstanceMetadataOrder is the default ordering of InstanceMetadata.
var DefaultInstanceMetadataOrder = &InstanceMetadataOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &InstanceMetadataOrderField{
		Value: func(im *InstanceMetadata) (ent.Value, error) {
			return im.ID, nil
		},
		column: instancemetadata.FieldID,
		toTerm: instancemetadata.ByID,
		toCursor: func(im *InstanceMetadata) Cursor {
			return Cursor{ID: im.ID}
		},
	},
}

// ToEdge converts InstanceMetadata into InstanceMetadataEdge.
func (im *InstanceMetadata) ToEdge(order *InstanceMetadataOrder) *InstanceMetadataEdge {
	if order == nil {
		order = DefaultInstanceMetadataOrder
	}
	return &InstanceMetadataEdge{
		Node:   im,
		Cursor: order.Field.toCursor(im),
	}
}

// InstanceProviderEdge is the edge representation of InstanceProvider.
type InstanceProviderEdge struct {
	Node   *InstanceProvider `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// InstanceProviderConnection is the connection containing edges to InstanceProvider.
type InstanceProviderConnection struct {
	Edges      []*InstanceProviderEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *InstanceProviderConnection) build(nodes []*InstanceProvider, pager *instanceproviderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *InstanceProvider
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *InstanceProvider {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *InstanceProvider {
			return nodes[i]
		}
	}
	c.Edges = make([]*InstanceProviderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InstanceProviderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InstanceProviderPaginateOption enables pagination customization.
type InstanceProviderPaginateOption func(*instanceproviderPager) error

// WithInstanceProviderOrder configures pagination ordering.
func WithInstanceProviderOrder(order *InstanceProviderOrder) InstanceProviderPaginateOption {
	if order == nil {
		order = DefaultInstanceProviderOrder
	}
	o := *order
	return func(pager *instanceproviderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInstanceProviderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInstanceProviderFilter configures pagination filter.
func WithInstanceProviderFilter(filter func(*InstanceProviderQuery) (*InstanceProviderQuery, error)) InstanceProviderPaginateOption {
	return func(pager *instanceproviderPager) error {
		if filter == nil {
			return errors.New("InstanceProviderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type instanceproviderPager struct {
	reverse bool
	order   *InstanceProviderOrder
	filter  func(*InstanceProviderQuery) (*InstanceProviderQuery, error)
}

func newInstanceProviderPager(opts []InstanceProviderPaginateOption, reverse bool) (*instanceproviderPager, error) {
	pager := &instanceproviderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInstanceProviderOrder
	}
	return pager, nil
}

func (p *instanceproviderPager) applyFilter(query *InstanceProviderQuery) (*InstanceProviderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *instanceproviderPager) toCursor(ip *InstanceProvider) Cursor {
	return p.order.Field.toCursor(ip)
}

func (p *instanceproviderPager) applyCursors(query *InstanceProviderQuery, after, before *Cursor) (*InstanceProviderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultInstanceProviderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *instanceproviderPager) applyOrder(query *InstanceProviderQuery) *InstanceProviderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultInstanceProviderOrder.Field {
		query = query.Order(DefaultInstanceProviderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *instanceproviderPager) orderExpr(query *InstanceProviderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInstanceProviderOrder.Field {
			b.Comma().Ident(DefaultInstanceProviderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to InstanceProvider.
func (ip *InstanceProviderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InstanceProviderPaginateOption,
) (*InstanceProviderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInstanceProviderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ip, err = pager.applyFilter(ip); err != nil {
		return nil, err
	}
	conn := &InstanceProviderConnection{Edges: []*InstanceProviderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ip.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ip, err = pager.applyCursors(ip, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ip.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ip.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ip = pager.applyOrder(ip)
	nodes, err := ip.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// InstanceProviderOrderFieldName orders InstanceProvider by name.
	InstanceProviderOrderFieldName = &InstanceProviderOrderField{
		Value: func(ip *InstanceProvider) (ent.Value, error) {
			return ip.Name, nil
		},
		column: instanceprovider.FieldName,
		toTerm: instanceprovider.ByName,
		toCursor: func(ip *InstanceProvider) Cursor {
			return Cursor{
				ID:    ip.ID,
				Value: ip.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f InstanceProviderOrderField) String() string {
	var str string
	switch f.column {
	case InstanceProviderOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f InstanceProviderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *InstanceProviderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("InstanceProviderOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *InstanceProviderOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid InstanceProviderOrderField", str)
	}
	return nil
}

// InstanceProviderOrderField defines the ordering field of InstanceProvider.
type InstanceProviderOrderField struct {
	// Value extracts the ordering value from the given InstanceProvider.
	Value    func(*InstanceProvider) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) instanceprovider.OrderOption
	toCursor func(*InstanceProvider) Cursor
}

// InstanceProviderOrder defines the ordering of InstanceProvider.
type InstanceProviderOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *InstanceProviderOrderField `json:"field"`
}

// DefaultInstanceProviderOrder is the default ordering of InstanceProvider.
var DefaultInstanceProviderOrder = &InstanceProviderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &InstanceProviderOrderField{
		Value: func(ip *InstanceProvider) (ent.Value, error) {
			return ip.ID, nil
		},
		column: instanceprovider.FieldID,
		toTerm: instanceprovider.ByID,
		toCursor: func(ip *InstanceProvider) Cursor {
			return Cursor{ID: ip.ID}
		},
	},
}

// ToEdge converts InstanceProvider into InstanceProviderEdge.
func (ip *InstanceProvider) ToEdge(order *InstanceProviderOrder) *InstanceProviderEdge {
	if order == nil {
		order = DefaultInstanceProviderOrder
	}
	return &InstanceProviderEdge{
		Node:   ip,
		Cursor: order.Field.toCursor(ip),
	}
}
