// Copyright 2022 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"go.infratographer.com/instance-api/internal/ent/instance"
	"go.infratographer.com/instance-api/internal/ent/instancemetadata"
)

// InstanceMetadata is the model entity for the InstanceMetadata schema.
type InstanceMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Data holds the value of the "data" field.
	Data json.RawMessage `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// InstanceID holds the value of the "instance_id" field.
	InstanceID uuid.UUID `json:"instance_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstanceMetadataQuery when eager-loading is set.
	Edges        InstanceMetadataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InstanceMetadataEdges holds the relations/edges for other nodes in the graph.
type InstanceMetadataEdges struct {
	// Instance holds the value of the instance edge.
	Instance *Instance `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceMetadataEdges) InstanceOrErr() (*Instance, error) {
	if e.loadedTypes[0] {
		if e.Instance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: instance.Label}
		}
		return e.Instance, nil
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstanceMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case instancemetadata.FieldData:
			values[i] = new([]byte)
		case instancemetadata.FieldNamespace:
			values[i] = new(sql.NullString)
		case instancemetadata.FieldCreatedAt, instancemetadata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case instancemetadata.FieldID, instancemetadata.FieldInstanceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstanceMetadata fields.
func (im *InstanceMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case instancemetadata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				im.ID = *value
			}
		case instancemetadata.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				im.Namespace = value.String
			}
		case instancemetadata.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &im.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case instancemetadata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				im.CreatedAt = value.Time
			}
		case instancemetadata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				im.UpdatedAt = value.Time
			}
		case instancemetadata.FieldInstanceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field instance_id", values[i])
			} else if value != nil {
				im.InstanceID = *value
			}
		default:
			im.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InstanceMetadata.
// This includes values selected through modifiers, order, etc.
func (im *InstanceMetadata) Value(name string) (ent.Value, error) {
	return im.selectValues.Get(name)
}

// QueryInstance queries the "instance" edge of the InstanceMetadata entity.
func (im *InstanceMetadata) QueryInstance() *InstanceQuery {
	return NewInstanceMetadataClient(im.config).QueryInstance(im)
}

// Update returns a builder for updating this InstanceMetadata.
// Note that you need to call InstanceMetadata.Unwrap() before calling this method if this InstanceMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (im *InstanceMetadata) Update() *InstanceMetadataUpdateOne {
	return NewInstanceMetadataClient(im.config).UpdateOne(im)
}

// Unwrap unwraps the InstanceMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (im *InstanceMetadata) Unwrap() *InstanceMetadata {
	_tx, ok := im.config.driver.(*txDriver)
	if !ok {
		panic("ent: InstanceMetadata is not a transactional entity")
	}
	im.config.driver = _tx.drv
	return im
}

// String implements the fmt.Stringer.
func (im *InstanceMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("InstanceMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", im.ID))
	builder.WriteString("namespace=")
	builder.WriteString(im.Namespace)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", im.Data))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(im.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(im.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("instance_id=")
	builder.WriteString(fmt.Sprintf("%v", im.InstanceID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (im InstanceMetadata) IsEntity() {}

// InstanceMetadataSlice is a parsable slice of InstanceMetadata.
type InstanceMetadataSlice []*InstanceMetadata
