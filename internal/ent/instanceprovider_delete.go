// Copyright 2022 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/instance-api/internal/ent/instanceprovider"
	"go.infratographer.com/instance-api/internal/ent/predicate"
)

// InstanceProviderDelete is the builder for deleting a InstanceProvider entity.
type InstanceProviderDelete struct {
	config
	hooks    []Hook
	mutation *InstanceProviderMutation
}

// Where appends a list predicates to the InstanceProviderDelete builder.
func (ipd *InstanceProviderDelete) Where(ps ...predicate.InstanceProvider) *InstanceProviderDelete {
	ipd.mutation.Where(ps...)
	return ipd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ipd *InstanceProviderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, InstanceProviderMutation](ctx, ipd.sqlExec, ipd.mutation, ipd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ipd *InstanceProviderDelete) ExecX(ctx context.Context) int {
	n, err := ipd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ipd *InstanceProviderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(instanceprovider.Table, sqlgraph.NewFieldSpec(instanceprovider.FieldID, field.TypeUUID))
	if ps := ipd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ipd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ipd.mutation.done = true
	return affected, err
}

// InstanceProviderDeleteOne is the builder for deleting a single InstanceProvider entity.
type InstanceProviderDeleteOne struct {
	ipd *InstanceProviderDelete
}

// Where appends a list predicates to the InstanceProviderDelete builder.
func (ipdo *InstanceProviderDeleteOne) Where(ps ...predicate.InstanceProvider) *InstanceProviderDeleteOne {
	ipdo.ipd.mutation.Where(ps...)
	return ipdo
}

// Exec executes the deletion query.
func (ipdo *InstanceProviderDeleteOne) Exec(ctx context.Context) error {
	n, err := ipdo.ipd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{instanceprovider.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ipdo *InstanceProviderDeleteOne) ExecX(ctx context.Context) {
	if err := ipdo.Exec(ctx); err != nil {
		panic(err)
	}
}
