// Copyright 2022 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (i *Instance) InstanceProvider(ctx context.Context) (*InstanceProvider, error) {
	result, err := i.Edges.InstanceProviderOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryInstanceProvider().Only(ctx)
	}
	return result, err
}

func (i *Instance) Metadata(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *InstanceMetadataOrder, where *InstanceMetadataWhereInput,
) (*InstanceMetadataConnection, error) {
	opts := []InstanceMetadataPaginateOption{
		WithInstanceMetadataOrder(orderBy),
		WithInstanceMetadataFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := i.Edges.totalCount[1][alias]
	if nodes, err := i.NamedMetadata(alias); err == nil || hasTotalCount {
		pager, err := newInstanceMetadataPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InstanceMetadataConnection{Edges: []*InstanceMetadataEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return i.QueryMetadata().Paginate(ctx, after, first, before, last, opts...)
}

func (im *InstanceMetadata) Instance(ctx context.Context) (*Instance, error) {
	result, err := im.Edges.InstanceOrErr()
	if IsNotLoaded(err) {
		result, err = im.QueryInstance().Only(ctx)
	}
	return result, err
}

func (ip *InstanceProvider) Instances(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *InstanceOrder, where *InstanceWhereInput,
) (*InstanceConnection, error) {
	opts := []InstancePaginateOption{
		WithInstanceOrder(orderBy),
		WithInstanceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ip.Edges.totalCount[0][alias]
	if nodes, err := ip.NamedInstances(alias); err == nil || hasTotalCount {
		pager, err := newInstancePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &InstanceConnection{Edges: []*InstanceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ip.QueryInstances().Paginate(ctx, after, first, before, last, opts...)
}
