package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"github.com/nrfta/go-paging"
	"go.infratographer.com/instance-api/graph"
)

// HasPreviousPage is the resolver for the hasPreviousPage field.
func (r *pageInfoResolver) HasPreviousPage(ctx context.Context, obj *paging.PageInfo) (bool, error) {
	panic(fmt.Errorf("not implemented: HasPreviousPage - hasPreviousPage"))
}

// HasNextPage is the resolver for the hasNextPage field.
func (r *pageInfoResolver) HasNextPage(ctx context.Context, obj *paging.PageInfo) (bool, error) {
	panic(fmt.Errorf("not implemented: HasNextPage - hasNextPage"))
}

// TotalCount is the resolver for the totalCount field.
func (r *pageInfoResolver) TotalCount(ctx context.Context, obj *paging.PageInfo) (*int, error) {
	panic(fmt.Errorf("not implemented: TotalCount - totalCount"))
}

// StartCursor is the resolver for the startCursor field.
func (r *pageInfoResolver) StartCursor(ctx context.Context, obj *paging.PageInfo) (*string, error) {
	panic(fmt.Errorf("not implemented: StartCursor - startCursor"))
}

// EndCursor is the resolver for the endCursor field.
func (r *pageInfoResolver) EndCursor(ctx context.Context, obj *paging.PageInfo) (*string, error) {
	panic(fmt.Errorf("not implemented: EndCursor - endCursor"))
}

// PageInfo returns graph.PageInfoResolver implementation.
func (r *Resolver) PageInfo() graph.PageInfoResolver { return &pageInfoResolver{r} }

type pageInfoResolver struct{ *Resolver }
